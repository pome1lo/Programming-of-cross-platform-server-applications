18. Схема FORMS-аутентификации с использованием сессий:
FORMS-аутентификация с использованием сессий - это метод, при котором пользователь вводит свои учетные данные (обычно имя пользователя и пароль) через веб-форму. Вот как это работает:

1. Пользователь открывает страницу входа и вводит свои учетные данные в форму.
2. При отправке формы сервер проверяет учетные данные пользователя, обращаясь к базе данных или другому хранилищу данных.
3. Если учетные данные верны, сервер создает для пользователя сессию. Это означает, что сервер записывает уникальный идентификатор сессии, связанный с данным пользователем, в свою хранилище сессий.
4. Сервер отправляет клиенту cookie с идентификатором сессии. Cookie обычно настроены так, чтобы быть доступными только серверу (флаг HttpOnly) и защищены от межсайтовой подделки запросов (флаг SameSite).
5. При последующих запросах клиент отправляет cookie с идентификатором сессии, и сервер использует этот идентификатор, чтобы найти данные сессии пользователя и подтвердить, что запрос был сделан аутентифицированным пользователем.
6. Когда пользователь выходит из системы, сервер уничтожает сессию, и cookie с идентификатором сессии становится недействительным.

19. Схема FORMS-аутентификации с использованием токенов:
FORMS-аутентификация с использованием токенов - это метод, при котором пользователь вводит свои учетные данные через веб-форму, а сервер в ответ отправляет токен, который используется для аутентификации и авторизации пользователя в последующих запросах. Процесс обычно выглядит так:

1. Пользователь заполняет форму входа на веб-странице и отправляет ее на сервер.
2. Сервер проверяет предоставленные учетные данные против данных в базе данных.
3. Если учетные данные верны, сервер генерирует токен, который содержит определенную информацию о пользователе (например, его идентификатор, имя пользователя, роли и т.д.) и подписывает его секретным ключом.
4. Сервер отправляет этот токен обратно клиенту, который сохраняет его для использования в последующих запросах.
5. Клиент прикрепляет токен к заголовку Authorization каждого запроса, который требует аутентификации.
6. Сервер проверяет подпись токена при каждом запросе, чтобы убедиться, что токен действителен и не был изменен. Если токен валиден, сервер обрабатывает запрос от имени пользователя.
7. Токены обычно имеют ограниченное время действия и могут быть обновлены с помощью специальных механизмов, таких как refresh токены.

Эти схемы являются популярными способами аутентификации в современных веб-приложениях, каждая из которых имеет свои преимущества и недостатки в зависимости от требований безопасности и удобства использования.